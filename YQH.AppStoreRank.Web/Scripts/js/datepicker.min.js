var Datepicker;
(function (h, g, c) {
    var f, d, n = !1, l = {
        classes: "", inline: !1, language: "ru", startDate: new Date, firstDay: "", weekends: [6, 0], dateFormat: "", altField: "", altFieldDateFormat: "@", toggleSelected: !0, keyboardNav: !0, position: "bottom left", offset: 12, view: "days", minView: "days", showOtherMonths: !0, selectOtherMonths: !0, moveToOtherMonthsOnSelect: !0, showOtherYears: !0, selectOtherYears: !0, moveToOtherYearsOnSelect: !0, minDate: "", maxDate: "", disableNavWhenOutOfRange: !0, multipleDates: !1, multipleDatesSeparator: ",", range: !1, todayButton: !1,
        clearButton: !1, showEvent: "focus", autoClose: !1, monthsFiled: "monthsShort", prevHtml: '<svg><path d="M 17,12 l -5,5 l 5,5"></path></svg>', nextHtml: '<svg><path d="M 14,12 l 5,5 l -5,5"></path></svg>', navTitles: { days: "MM, <i>yyyy</i>", months: "yyyy", years: "yyyy1 - yyyy2" }, onSelect: "", onChangeMonth: "", onChangeYear: "", onChangeDecade: "", onChangeView: "", onRenderCell: ""
    }, m = {
        ctrlRight: [17, 39], ctrlUp: [17, 38], ctrlLeft: [17, 37], ctrlDown: [17, 40], shiftRight: [16, 39], shiftUp: [16, 38], shiftLeft: [16, 37], shiftDown: [16, 40],
        altUp: [18, 38], altRight: [18, 39], altLeft: [18, 37], altDown: [18, 40], ctrlShiftUp: [16, 17, 38]
    }, k; k = Datepicker = function (a, b) {
        this.el = a; this.$el = g(a); this.opts = g.extend(!0, {}, l, b, this.$el.data()); f == c && (f = g("body")); this.opts.startDate || (this.opts.startDate = new Date); "INPUT" == this.el.nodeName && (this.elIsInput = !0); this.opts.altField && (this.$altField = "string" == typeof this.opts.altField ? g(this.opts.altField) : this.opts.altField); this.silent = this.visible = this.inited = !1; this.currentDate = this.opts.startDate; this.currentView =
        this.opts.view; this._createShortCuts(); this.selectedDates = []; this.views = {}; this.keys = []; this.maxRange = this.minRange = ""; this.init()
    }; k.prototype = {
        viewIndexes: ["days", "months", "years"], init: function () {
            n || this.opts.inline || !this.elIsInput || this._buildDatepickersContainer(); this._buildBaseHtml(); this._defineLocale(this.opts.language); this._syncWithMinMaxDates(); this.elIsInput && (this.opts.inline || (this._setPositionClasses(this.opts.position), this._bindEvents()), this.opts.keyboardNav && this._bindKeyboardEvents(),
            this.$datepicker.on("mousedown", this._onMouseDownDatepicker.bind(this)), this.$datepicker.on("mouseup", this._onMouseUpDatepicker.bind(this))); this.opts.classes && this.$datepicker.addClass(this.opts.classes); this.views[this.currentView] = new Datepicker.Body(this, this.currentView, this.opts); this.views[this.currentView].show(); this.nav = new Datepicker.Navigation(this, this.opts); this.view = this.currentView; this.$datepicker.on("mouseenter", ".datepicker--cell", this._onMouseEnterCell.bind(this)); this.$datepicker.on("mouseleave",
            ".datepicker--cell", this._onMouseLeaveCell.bind(this)); this.inited = !0
        }, _createShortCuts: function () { this.minDate = this.opts.minDate ? this.opts.minDate : new Date(-86399999136E5); this.maxDate = this.opts.maxDate ? this.opts.maxDate : new Date(86399999136E5) }, _bindEvents: function () { this.$el.on(this.opts.showEvent, this._onShowEvent.bind(this)); this.$el.on("blur", this._onBlur.bind(this)); this.$el.on("input", this._onInput.bind(this)); g(h).on("resize", this._onResize.bind(this)) }, _bindKeyboardEvents: function () {
            this.$el.on("keydown",
            this._onKeyDown.bind(this)); this.$el.on("keyup", this._onKeyUp.bind(this)); this.$el.on("hotKey", this._onHotKey.bind(this))
        }, isWeekend: function (a) { return -1 !== this.opts.weekends.indexOf(a) }, _defineLocale: function (a) {
            "string" == typeof a ? (this.loc = Datepicker.language[a], this.loc || (console.warn("Can't find language \"" + a + '" in Datepicker.language, will use "ru" instead'), this.loc = g.extend(!0, {}, Datepicker.language.ru)), this.loc = g.extend(!0, {}, Datepicker.language.ru, Datepicker.language[a])) : this.loc = g.extend(!0,
            {}, Datepicker.language.ru, a); this.opts.dateFormat && (this.loc.dateFormat = this.opts.dateFormat); this.opts.firstDay && (this.loc.firstDay = this.opts.firstDay)
        }, _buildDatepickersContainer: function () { n = !0; f.append('<div class="datepickers-container" id="datepickers-container"></div>'); d = g("#datepickers-container") }, _buildBaseHtml: function () {
            var a; a = g('<div class="datepicker-inline">'); a = "INPUT" == this.el.nodeName ? this.opts.inline ? a.insertAfter(this.$el) : d : a.appendTo(this.$el); this.$datepicker = g('<div class="datepicker"><i class="datepicker--pointer"></i><nav class="datepicker--nav"></nav><div class="datepicker--content"></div></div>').appendTo(a);
            this.$content = g(".datepicker--content", this.$datepicker); this.$nav = g(".datepicker--nav", this.$datepicker)
        }, _triggerOnChange: function () {
            if (!this.selectedDates.length) return this.opts.onSelect("", "", this); var a = this.selectedDates, b = k.getParsedDate(a[0]), e = this, c = new Date(b.year, b.month, b.date), b = a.map(function (a) { return e.formatDate(e.loc.dateFormat, a) }).join(this.opts.multipleDatesSeparator); this.opts.multipleDates && (c = a.map(function (a) { a = k.getParsedDate(a); return new Date(a.year, a.month, a.date) }));
            this.opts.onSelect(b, c, this)
        }, next: function () { var a = this.parsedDate, b = this.opts; switch (this.view) { case "days": this.date = new Date(a.year, a.month + 1, 1); if (b.onChangeMonth) b.onChangeMonth(this.parsedDate.month, this.parsedDate.year); break; case "months": this.date = new Date(a.year + 1, a.month, 1); if (b.onChangeYear) b.onChangeYear(this.parsedDate.year); break; case "years": if (this.date = new Date(a.year + 10, 0, 1), b.onChangeDecade) b.onChangeDecade(this.curDecade) } }, prev: function () {
            var a = this.parsedDate, b = this.opts; switch (this.view) {
                case "days": this.date =
                new Date(a.year, a.month - 1, 1); if (b.onChangeMonth) b.onChangeMonth(this.parsedDate.month, this.parsedDate.year); break; case "months": this.date = new Date(a.year - 1, a.month, 1); if (b.onChangeYear) b.onChangeYear(this.parsedDate.year); break; case "years": if (this.date = new Date(a.year - 10, 0, 1), b.onChangeDecade) b.onChangeDecade(this.curDecade)
            }
        }, formatDate: function (a, b) {
            b = b || this.date; var e = a, c = this.loc, d = k.getDecade(b), f = k.getParsedDate(b); switch (!0) {
                case /@/.test(e): e = e.replace(/@/, b.getTime()); case /dd/.test(e): e =
                e.replace(/\bdd\b/, f.fullDate); case /d/.test(e): e = e.replace(/\bd\b/, f.date); case /DD/.test(e): e = e.replace(/\bDD\b/, c.days[f.day]); case /D/.test(e): e = e.replace(/\bD\b/, c.daysShort[f.day]); case /mm/.test(e): e = e.replace(/\bmm\b/, f.fullMonth); case /m/.test(e): e = e.replace(/\bm\b/, f.month + 1); case /MM/.test(e): e = e.replace(/\bMM\b/, this.loc.months[f.month]); case /M/.test(e): e = e.replace(/\bM\b/, c.monthsShort[f.month]); case /yyyy/.test(e): e = e.replace(/\byyyy\b/, f.year); case /yyyy1/.test(e): e = e.replace(/\byyyy1\b/,
                d[0]); case /yyyy2/.test(e): e = e.replace(/\byyyy2\b/, d[1]); case /yy/.test(e): e = e.replace(/\byy\b/, f.year.toString().slice(-2))
            } return e
        }, selectDate: function (a) {
            var b = this.opts, e = this.parsedDate, c = this.selectedDates.length, d = ""; if (a instanceof Date) {
                "days" == this.view && a.getMonth() != e.month && b.moveToOtherMonthsOnSelect && (d = new Date(a.getFullYear(), a.getMonth(), 1)); "years" == this.view && a.getFullYear() != e.year && b.moveToOtherYearsOnSelect && (d = new Date(a.getFullYear(), 0, 1)); d && (this.silent = !0, this.date = d,
                this.silent = !1, this.nav._render()); if (b.multipleDates) { if (c === b.multipleDates) return; this._isSelected(a) || this.selectedDates.push(a) } else b.range ? 2 == c ? (this.selectedDates = [a], this.minRange = a, this.maxRange = "") : 1 == c ? (this.selectedDates.push(a), this.maxRange ? this.minRange = a : this.maxRange = a, this.selectedDates = [this.minRange, this.maxRange]) : (this.selectedDates = [a], this.minRange = a) : this.selectedDates = [a]; this._setInputValue(); b.onSelect && this._triggerOnChange(); b.autoClose && (b.multipleDates || b.range ? b.range &&
                2 == this.selectedDates.length && this.hide() : this.hide()); this.views[this.currentView]._render()
            }
        }, removeDate: function (a) { var b = this.selectedDates, e = this; if (a instanceof Date) return b.some(function (c, d) { if (k.isSame(c, a)) return b.splice(d, 1), e.selectedDates.length || (e.minRange = "", e.maxRange = ""), e.views[e.currentView]._render(), e._setInputValue(), e.opts.onSelect && e._triggerOnChange(), !0 }) }, today: function () { this.silent = !0; this.view = this.opts.minView; this.silent = !1; this.date = new Date }, clear: function () {
            this.selectedDates =
            []; this.maxRange = this.minRange = ""; this.views[this.currentView]._render(); this._setInputValue(); this.opts.onSelect && this._triggerOnChange()
        }, update: function (a, b) {
            var e = arguments.length; 2 == e ? this.opts[a] = b : 1 == e && "object" == typeof a && (this.opts = g.extend(!0, this.opts, a)); this._createShortCuts(); this._syncWithMinMaxDates(); this._defineLocale(this.opts.language); this.nav._addButtonsIfNeed(); this.nav._render(); this.views[this.currentView]._render(); this.elIsInput && !this.opts.inline && (this._setPositionClasses(this.opts.position),
            this.visible && this.setPosition(this.opts.position)); this.opts.classes && this.$datepicker.addClass(this.opts.classes); return this
        }, _syncWithMinMaxDates: function () { var a = this.date.getTime(); this.silent = !0; this.minTime > a && (this.date = this.minDate); this.maxTime < a && (this.date = this.maxDate); this.silent = !1 }, _isSelected: function (a, b) { return this.selectedDates.some(function (e) { return k.isSame(e, a, b) }) }, _setInputValue: function () {
            var a = this, b = this.loc.dateFormat, e = this.opts.altFieldDateFormat, c = this.selectedDates.map(function (e) {
                return a.formatDate(b,
                e)
            }), d; this.$altField && (d = this.selectedDates.map(function (b) { return a.formatDate(e, b) }), d = d.join(this.opts.multipleDatesSeparator), this.$altField.val(d)); c = c.join(this.opts.multipleDatesSeparator); this.$el.val(c)
        }, _isInRange: function (a, b) {
            var e = a.getTime(), c = k.getParsedDate(a), d = k.getParsedDate(this.minDate), f = k.getParsedDate(this.maxDate), g = (new Date(c.year, c.month, d.date)).getTime(), h = (new Date(c.year, c.month, f.date)).getTime(), e = {
                day: e >= this.minTime && e <= this.maxTime, month: g >= this.minTime && h <= this.maxTime,
                year: c.year >= d.year && c.year <= f.year
            }; return b ? e[b] : e.day
        }, _getDimensions: function (a) { var b = a.offset(); return { width: a.outerWidth(), height: a.outerHeight(), left: b.left, top: b.top } }, _getDateFromCell: function (a) { var b = this.parsedDate, e = a.data("year") || b.year, b = a.data("month") == c ? b.month : a.data("month"); a = a.data("date") || 1; return new Date(e, b, a) }, _setPositionClasses: function (a) { a = a.split(" "); var b = a[0]; a = "datepicker -" + b + "-" + a[1] + "- -from-" + b + "-"; this.visible && (a += " active"); this.$datepicker.removeAttr("class").addClass(a) },
        setPosition: function (a) {
            a = a || this.opts.position; var b = this._getDimensions(this.$el), e = this._getDimensions(this.$datepicker), c = a.split(" "), d, f; a = this.opts.offset; var g = c[0], c = c[1]; switch (g) { case "top": d = b.top - e.height - a; break; case "right": f = b.left + b.width + a; break; case "bottom": d = b.top + b.height + a; break; case "left": f = b.left - e.width - a } switch (c) {
                case "top": d = b.top; break; case "right": f = b.left + b.width - e.width; break; case "bottom": d = b.top + b.height - e.height; break; case "left": f = b.left; break; case "center": /left|right/.test(g) ?
                d = b.top + b.height / 2 - e.height / 2 : f = b.left + b.width / 2 - e.width / 2
            } this.$datepicker.css({ left: f, top: d })
        }, show: function () { this.setPosition(this.opts.position); this.$datepicker.addClass("active"); this.visible = !0 }, hide: function () { this.$datepicker.removeClass("active").css({ left: "-100000px" }); this.focused = ""; this.keys = []; this.visible = this.inFocus = !1; this.$el.blur() }, down: function (a) { this._changeView(a, "down") }, up: function (a) { this._changeView(a, "up") }, _changeView: function (a, b) {
            a = a || this.focused || this.date; var e =
            "up" == b ? this.viewIndex + 1 : this.viewIndex - 1; 2 < e && (e = 2); 0 > e && (e = 0); this.silent = !0; this.date = new Date(a.getFullYear(), a.getMonth(), 1); this.silent = !1; this.view = this.viewIndexes[e]
        }, _handleHotKey: function (a) {
            var b = k.getParsedDate(this._getFocusedDate()), e = this.opts, c = !1, d = !1, f = !1, g = b.year, h = b.month, b = b.date; switch (a) {
                case "ctrlRight": case "ctrlUp": h += 1; c = !0; break; case "ctrlLeft": case "ctrlDown": --h; c = !0; break; case "shiftRight": case "shiftUp": d = !0; g += 1; break; case "shiftLeft": case "shiftDown": d = !0; --g; break;
                case "altRight": case "altUp": f = !0; g += 10; break; case "altLeft": case "altDown": f = !0; g -= 10; break; case "ctrlShiftUp": this.up()
            } k.getDaysCount(new Date(g, h)); a = new Date(g, h, b); a.getTime() < this.minTime ? a = this.minDate : a.getTime() > this.maxTime && (a = this.maxDate); this.focused = a; a = k.getParsedDate(a); if (c && e.onChangeMonth) e.onChangeMonth(a.month, a.year); if (d && e.onChangeYear) e.onChangeYear(a.year); if (f && e.onChangeDecade) e.onChangeDecade(this.curDecade)
        }, _registerKey: function (a) {
            this.keys.some(function (b) {
                return b ==
                a
            }) || this.keys.push(a)
        }, _unRegisterKey: function (a) { a = this.keys.indexOf(a); this.keys.splice(a, 1) }, _isHotKeyPressed: function () { var a, b = !1, e = this.keys.sort(), c; for (c in m) a = m[c], e.length == a.length && a.every(function (a, b) { return a == e[b] }) && (this._trigger("hotKey", c), b = !0); return b }, _trigger: function (a, b) { this.$el.trigger(a, b) }, _focusNextCell: function (a, b) {
            b = b || this.cellType; var c = k.getParsedDate(this._getFocusedDate()), d = c.year, f = c.month, c = c.date; if (!this._isHotKeyPressed()) {
                switch (a) {
                    case 37: "day" == b ?
                    --c : ""; "month" == b ? --f : ""; "year" == b ? --d : ""; break; case 38: "day" == b ? c -= 7 : ""; "month" == b ? f -= 3 : ""; "year" == b ? d -= 4 : ""; break; case 39: "day" == b ? c += 1 : ""; "month" == b ? f += 1 : ""; "year" == b ? d += 1 : ""; break; case 40: "day" == b ? c += 7 : "", "month" == b ? f += 3 : "", "year" == b ? d += 4 : ""
                } d = new Date(d, f, c); d.getTime() < this.minTime ? d = this.minDate : d.getTime() > this.maxTime && (d = this.maxDate); this.focused = d
            }
        }, _getFocusedDate: function () {
            var a = this.focused || this.selectedDates[this.selectedDates.length - 1], b = this.parsedDate; if (!a) switch (this.view) {
                case "days": a =
                new Date(b.year, b.month, (new Date).getDate()); break; case "months": a = new Date(b.year, b.month, 1); break; case "years": a = new Date(b.year, 0, 1)
            } return a
        }, _getCell: function (a, b) { b = b || this.cellType; var c = k.getParsedDate(a), d = '.datepicker--cell[data-year="' + c.year + '"]'; switch (b) { case "month": d = '[data-month="' + c.month + '"]'; break; case "day": d += '[data-month="' + c.month + '"][data-date="' + c.date + '"]' } c = this.views[this.currentView].$el.find(d); return c.length ? c : "" }, _onShowEvent: function () { this.visible || this.show() },
        _onBlur: function () { !this.inFocus && this.visible && this.hide() }, _onMouseDownDatepicker: function (a) { this.inFocus = !0 }, _onMouseUpDatepicker: function (a) { this.inFocus = !1; this.$el.focus() }, _onInput: function () { this.$el.val() || this.clear() }, _onResize: function () { this.visible && this.setPosition() }, _onKeyDown: function (a) {
            var b = a.which; this._registerKey(b); 37 <= b && 40 >= b && (a.preventDefault(), this._focusNextCell(b)); if (13 == b && this.focused) {
                if (this._getCell(this.focused).hasClass("-disabled-")) return; this.view != this.opts.minView ?
                this.down() : (a = this._isSelected(this.focused, this.cellType)) ? a && this.opts.toggleSelected && this.removeDate(this.focused) : this.selectDate(this.focused)
            } 27 == b && this.hide()
        }, _onKeyUp: function (a) { this._unRegisterKey(a.which) }, _onHotKey: function (a, b) { this._handleHotKey(b) }, _onMouseEnterCell: function (a) {
            a = g(a.target).closest(".datepicker--cell"); var b = this._getDateFromCell(a); this.silent = !0; this.focused && (this.focused = ""); a.addClass("-focus-"); this.focused = b; this.silent = !1; this.opts.range && 1 == this.selectedDates.length &&
            (this.minRange = this.selectedDates[0], this.maxRange = "", k.less(this.minRange, this.focused) && (this.maxRange = this.minRange, this.minRange = ""), this.views[this.currentView]._update())
        }, _onMouseLeaveCell: function (a) { g(a.target).closest(".datepicker--cell").removeClass("-focus-"); this.silent = !0; this.focused = ""; this.silent = !1 }, set focused(a) {
            if (!a && this.focused) { var b = this._getCell(this.focused); b.length && b.removeClass("-focus-") } this._focused = a; this.opts.range && 1 == this.selectedDates.length && (this.minRange =
            this.selectedDates[0], this.maxRange = "", k.less(this.minRange, this._focused) && (this.maxRange = this.minRange, this.minRange = "")); this.silent || (this.date = a)
        }, get focused() { return this._focused }, get parsedDate() { return k.getParsedDate(this.date) }, set date(a) { if (a instanceof Date) return this.currentDate = a, this.inited && !this.silent && (this.views[this.view]._render(), this.nav._render(), this.visible && this.elIsInput && this.setPosition()), a }, get date() { return this.currentDate }, set view(a) {
            this.viewIndex = this.viewIndexes.indexOf(a);
            if (!(0 > this.viewIndex)) { this.prevView = this.currentView; this.currentView = a; if (this.inited) { this.views[a] ? this.views[a]._render() : this.views[a] = new Datepicker.Body(this, a, this.opts); this.views[this.prevView].hide(); this.views[a].show(); this.nav._render(); if (this.opts.onChangeView) this.opts.onChangeView(a); this.elIsInput && this.visible && this.setPosition() } return a }
        }, get view() { return this.currentView }, get cellType() { return this.view.substring(0, this.view.length - 1) }, get minTime() {
            var a = k.getParsedDate(this.minDate);
            return (new Date(a.year, a.month, a.date)).getTime()
        }, get maxTime() { var a = k.getParsedDate(this.maxDate); return (new Date(a.year, a.month, a.date)).getTime() }, get curDecade() { return k.getDecade(this.date) }
    }; k.getDaysCount = function (a) { return (new Date(a.getFullYear(), a.getMonth() + 1, 0)).getDate() }; k.getParsedDate = function (a) { return { year: a.getFullYear(), month: a.getMonth(), fullMonth: 10 > a.getMonth() + 1 ? "0" + (a.getMonth() + 1) : a.getMonth() + 1, date: a.getDate(), fullDate: 10 > a.getDate() ? "0" + a.getDate() : a.getDate(), day: a.getDay() } };
    k.getDecade = function (a) { a = 10 * Math.floor(a.getFullYear() / 10); return [a, a + 9] }; k.template = function (a, b) { return a.replace(/#\{([\w]+)\}/g, function (a, c) { if (b[c] || 0 === b[c]) return b[c] }) }; k.isSame = function (a, b, c) { if (!a || !b) return !1; a = k.getParsedDate(a); b = k.getParsedDate(b); return { day: a.date == b.date && a.month == b.month && a.year == b.year, month: a.month == b.month && a.year == b.year, year: a.year == b.year }[c ? c : "day"] }; k.less = function (a, b, c) { return a && b ? b.getTime() < a.getTime() : !1 }; k.bigger = function (a, b, c) {
        return a && b ? b.getTime() >
        a.getTime() : !1
    }; Datepicker.language = {
        ru: {
            days: "\u0412\u043e\u0441\u043a\u0440\u0435\u0441\u0435\u043d\u044c\u0435 \u041f\u043e\u043d\u0435\u0434\u0435\u043b\u044c\u043d\u0438\u043a \u0412\u0442\u043e\u0440\u043d\u0438\u043a \u0421\u0440\u0435\u0434\u0430 \u0427\u0435\u0442\u0432\u0435\u0440\u0433 \u041f\u044f\u0442\u043d\u0438\u0446\u0430 \u0421\u0443\u0431\u0431\u043e\u0442\u0430".split(" "), daysShort: "\u0412\u043e\u0441 \u041f\u043e\u043d \u0412\u0442\u043e \u0421\u0440\u0435 \u0427\u0435\u0442 \u041f\u044f\u0442 \u0421\u0443\u0431".split(" "),
            daysMin: "\u0412\u0441 \u041f\u043d \u0412\u0442 \u0421\u0440 \u0427\u0442 \u041f\u0442 \u0421\u0431".split(" "), months: "\u042f\u043d\u0432\u0430\u0440\u044c \u0424\u0435\u0432\u0440\u0430\u043b\u044c \u041c\u0430\u0440\u0442 \u0410\u043f\u0440\u0435\u043b\u044c \u041c\u0430\u0439 \u0418\u044e\u043d\u044c \u0418\u044e\u043b\u044c \u0410\u0432\u0433\u0443\u0441\u0442 \u0421\u0435\u043d\u0442\u044f\u0431\u0440\u044c \u041e\u043a\u0442\u044f\u0431\u0440\u044c \u041d\u043e\u044f\u0431\u0440\u044c \u0414\u0435\u043a\u0430\u0431\u0440\u044c".split(" "),
            monthsShort: "\u042f\u043d\u0432 \u0424\u0435\u0432 \u041c\u0430\u0440 \u0410\u043f\u0440 \u041c\u0430\u0439 \u0418\u044e\u043d \u0418\u044e\u043b \u0410\u0432\u0433 \u0421\u0435\u043d \u041e\u043a\u0442 \u041d\u043e\u044f \u0414\u0435\u043a".split(" "), today: "\u0421\u0435\u0433\u043e\u0434\u043d\u044f", clear: "\u041e\u0447\u0438\u0441\u0442\u0438\u0442\u044c", dateFormat: "dd.mm.yyyy", firstDay: 1
        }
    }; Datepicker.language = {
        cn: {
            days: "\u661f\u671f\u65e5 \u661f\u671f\u4e00 \u661f\u671f\u4e8c \u661f\u671f\u4e09 \u661f\u671f\u56db \u661f\u671f\u4e94 \u661f\u671f\u516d".split(" "),
            daysShort: "\u5468\u65e5 \u5468\u4e00 \u5468\u4e8c \u5468\u4e09 \u5468\u56db \u5468\u4e94 \u5468\u516d".split(" "), daysMin: "\u5468\u65e5 \u5468\u4e00 \u5468\u4e8c \u5468\u4e09 \u5468\u56db \u5468\u4e94 \u5468\u516d".split(" "), months: "\u4e00\u6708 \u4e8c\u6708 \u4e09\u6708 \u56db\u6708 \u4e94\u6708 \u516d\u6708 \u4e03\u6708 \u516b\u6708 \u4e5d\u6708 \u5341\u6708 \u5341\u4e00\u6708 \u5341\u4e8c\u6708".split(" "), monthsShort: "1\u6708 2\u6708 3\u6708 4\u6708 5\u6708 6\u6708 7\u6708 8\u6708 9\u6708 10\u6708 11\u6708 12\u6708".split(" "),
            today: "\u4eca\u5929", clear: "\u6e05\u9664", dateFormat: "dd/mm/yyyy", firstDay: 0
        }
    }; g.fn.datepicker = function (a) { return this.each(function () { if (g.data(this, "datepicker")) { var b = g.data(this, "datepicker"); b.opts = g.extend(!0, b.opts, a); b.update() } else g.data(this, "datepicker", new Datepicker(this, a)) }) }; g(function () { g(".datepicker-here").datepicker() })
})(window, jQuery);
(function () {
    var h = { days: '<div class="datepicker--days datepicker--body"><div class="datepicker--days-names"></div><div class="datepicker--cells datepicker--cells-days"></div></div>', months: '<div class="datepicker--months datepicker--body"><div class="datepicker--cells datepicker--cells-months"></div></div>', years: '<div class="datepicker--years datepicker--body"><div class="datepicker--cells datepicker--cells-years"></div></div>' }, g = Datepicker; g.Body = function (c, f, d) {
        this.d = c; this.type = f; this.opts =
        d; this.init()
    }; g.Body.prototype = {
        init: function () { this._buildBaseHtml(); this._render(); this._bindEvents() }, _bindEvents: function () { this.$el.on("click", ".datepicker--cell", $.proxy(this._onClickCell, this)) }, _buildBaseHtml: function () { this.$el = $(h[this.type]).appendTo(this.d.$content); this.$names = $(".datepicker--days-names", this.$el); this.$cells = $(".datepicker--cells", this.$el) }, _getDayNamesHtml: function (c, f, d, g) {
            f = void 0 != f ? f : c; d = d ? d : ""; g = void 0 != g ? g : 0; if (7 < g) return d; if (7 == f) return this._getDayNamesHtml(c,
            0, d, ++g); d += '<div class="datepicker--day-name' + (this.d.isWeekend(f) ? " -weekend-" : "") + '">' + this.d.loc.daysMin[f] + "</div>"; return this._getDayNamesHtml(c, ++f, d, ++g)
        }, _getCellContents: function (c, f) {
            var d = "datepicker--cell datepicker--cell-" + f, h = new Date, l = this.d, m = l.opts, k = g.getParsedDate(c), a = {}, b = k.date; m.onRenderCell && (a = m.onRenderCell(c, f) || {}, b = a.html ? a.html : b, d += a.classes ? " " + a.classes : ""); switch (f) {
                case "day": l.isWeekend(k.day) && (d += " -weekend-"); k.month != this.d.parsedDate.month && (d += " -other-month-",
                m.selectOtherMonths || (d += " -disabled-"), m.showOtherMonths || (b = "")); break; case "month": b = l.loc[l.opts.monthsFiled][k.month]; break; case "year": b = l.curDecade; if (k.year < b[0] || k.year > b[1]) d += " -other-decade-", m.selectOtherYears || (d += " -disabled-"); b = k.year
            } m.onRenderCell && (a = m.onRenderCell(c, f) || {}, b = a.html ? a.html : b, d += a.classes ? " " + a.classes : ""); if (m.range) if (g.isSame(l.minRange, c, f) && (d += " -range-from-"), g.isSame(l.maxRange, c, f) && (d += " -range-to-"), 1 == l.selectedDates.length && l.focused) {
                if (g.bigger(l.minRange,
                c) && g.less(l.focused, c) || g.less(l.maxRange, c) && g.bigger(l.focused, c)) d += " -in-range-"; g.less(l.maxRange, c) && g.isSame(l.focused, c) && (d += " -range-from-"); g.bigger(l.minRange, c) && g.isSame(l.focused, c) && (d += " -range-to-")
            } else 2 == l.selectedDates.length && g.bigger(l.minRange, c) && g.less(l.maxRange, c) && (d += " -in-range-"); g.isSame(h, c, f) && (d += " -current-"); l.focused && g.isSame(c, l.focused, f) && (d += " -focus-"); l._isSelected(c, f) && (d += " -selected-"); if (!l._isInRange(c, f) || a.disabled) d += " -disabled-"; return {
                html: b,
                classes: d
            }
        }, _getDaysHtml: function (c) { for (var f = g.getDaysCount(c), d = (new Date(c.getFullYear(), c.getMonth(), 1)).getDay(), h = (new Date(c.getFullYear(), c.getMonth(), f)).getDay(), d = d - this.d.loc.firstDay, l = 6 - h + this.d.loc.firstDay, h = "", d = -(0 > d ? d + 7 : d) + 1, m = f + (6 < l ? l - 7 : l) ; d <= m; d++) l = c.getFullYear(), f = c.getMonth(), h += this._getDayHtml(new Date(l, f, d)); return h }, _getDayHtml: function (c) {
            var f = this._getCellContents(c, "day"); return '<div class="' + f.classes + '" data-date="' + c.getDate() + '" data-month="' + c.getMonth() + '" data-year="' +
            c.getFullYear() + '">' + f.html + "</div>"
        }, _getMonthsHtml: function (c) { var f = ""; c = g.getParsedDate(c); for (var d = 0; 12 > d;) f += this._getMonthHtml(new Date(c.year, d)), d++; return f }, _getMonthHtml: function (c) { var f = this._getCellContents(c, "month"); return '<div class="' + f.classes + '" data-month="' + c.getMonth() + '">' + f.html + "</div>" }, _getYearsHtml: function (c) { g.getParsedDate(c); c = g.getDecade(c); var f = "", d = c[0] - 1; for (d; d <= c[1] + 1; d++) f += this._getYearHtml(new Date(d, 0)); return f }, _getYearHtml: function (c) {
            var f = this._getCellContents(c,
            "year"); return '<div class="' + f.classes + '" data-year="' + c.getFullYear() + '">' + f.html + "</div>"
        }, _renderTypes: { days: function () { var c = this._getDayNamesHtml(this.d.loc.firstDay), f = this._getDaysHtml(this.d.currentDate); this.$cells.html(f); this.$names.html(c) }, months: function () { var c = this._getMonthsHtml(this.d.currentDate); this.$cells.html(c) }, years: function () { var c = this._getYearsHtml(this.d.currentDate); this.$cells.html(c) } }, _render: function () { this._renderTypes[this.type].bind(this)() }, _update: function () {
            var c =
            this, f, d, g; $(".datepicker--cell", this.$cells).each(function (h, m) { d = $(this); g = c.d._getDateFromCell($(this)); f = c._getCellContents(g, c.d.cellType); d.attr("class", f.classes) })
        }, show: function () { this.$el.addClass("active"); this.acitve = !0 }, hide: function () { this.$el.removeClass("active"); this.active = !1 }, _handleClick: function (c) {
            var f = c.data("date") || 1, d = c.data("month") || 0; c = c.data("year") || this.d.parsedDate.year; this.d.view != this.opts.minView ? this.d.down(new Date(c, d, f)) : (f = new Date(c, d, f), (d = this.d._isSelected(f,
            this.d.cellType)) ? d && this.opts.toggleSelected && this.d.removeDate(f) : this.d.selectDate(f))
        }, _onClickCell: function (c) { c = $(c.target).closest(".datepicker--cell"); c.hasClass("-disabled-") || this._handleClick.bind(this)(c) }
    }
})();
(function () {
    Datepicker.Navigation = function (h, g) { this.d = h; this.opts = g; this.$buttonsContainer = ""; this.init() }; Datepicker.Navigation.prototype = {
        init: function () { this._buildBaseHtml(); this._bindEvents() }, _bindEvents: function () { this.d.$nav.on("click", ".datepicker--nav-action", $.proxy(this._onClickNavButton, this)); this.d.$nav.on("click", ".datepicker--nav-title", $.proxy(this._onClickNavTitle, this)); this.d.$datepicker.on("click", ".datepicker--button", $.proxy(this._onClickNavButton, this)) }, _buildBaseHtml: function () {
            this._render();
            this._addButtonsIfNeed()
        }, _addButtonsIfNeed: function () { this.opts.todayButton && this._addButton("today"); this.opts.clearButton && this._addButton("clear") }, _render: function () {
            var h = this._getTitle(this.d.currentDate), h = Datepicker.template('<div class="datepicker--nav-action" data-action="prev">#{prevHtml}</div><div class="datepicker--nav-title">#{title}</div><div class="datepicker--nav-action" data-action="next">#{nextHtml}</div>', $.extend({ title: h }, this.opts)); this.d.$nav.html(h); "years" == this.d.view &&
            $(".datepicker--nav-title", this.d.$nav).addClass("-disabled-"); this.setNavStatus()
        }, _getTitle: function (h) { return this.d.formatDate(this.opts.navTitles[this.d.view], h) }, _addButton: function (h) { this.$buttonsContainer.length || this._addButtonsContainer(); var g = Datepicker.template('<span class="datepicker--button" data-action="#{action}">#{label}</span>', { action: h, label: this.d.loc[h] }); $("[data-action=" + h + "]", this.$buttonsContainer).length || this.$buttonsContainer.append(g) }, _addButtonsContainer: function () {
            this.d.$datepicker.append('<div class="datepicker--buttons"></div>');
            this.$buttonsContainer = $(".datepicker--buttons", this.d.$datepicker)
        }, setNavStatus: function () {
            if ((this.opts.minDate || this.opts.maxDate) && this.opts.disableNavWhenOutOfRange) {
                var h = this.d.parsedDate, g = h.month, c = h.year, h = h.date; switch (this.d.view) {
                    case "days": this.d._isInRange(new Date(c, g - 1, h), "month") || this._disableNav("prev"); this.d._isInRange(new Date(c, g + 1, h), "month") || this._disableNav("next"); break; case "months": this.d._isInRange(new Date(c - 1, g, h), "year") || this._disableNav("prev"); this.d._isInRange(new Date(c +
                    1, g, h), "year") || this._disableNav("next"); break; case "years": this.d._isInRange(new Date(c - 10, g, h), "year") || this._disableNav("prev"), this.d._isInRange(new Date(c + 10, g, h), "year") || this._disableNav("next")
                }
            }
        }, _disableNav: function (h) { $('[data-action="' + h + '"]', this.d.$nav).addClass("-disabled-") }, _activateNav: function (h) { $('[data-action="' + h + '"]', this.d.$nav).removeClass("-disabled-") }, _onClickNavButton: function (h) { h = $(h.target).closest("[data-action]").data("action"); this.d[h]() }, _onClickNavTitle: function (h) {
            if (!$(h.target).hasClass("-disabled-")) {
                if ("days" ==
                this.d.view) return this.d.view = "months"; this.d.view = "years"
            }
        }
    }
})();